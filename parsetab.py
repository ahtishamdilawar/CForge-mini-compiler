
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL_TYPE COMMA DIVIDE ELSE EQ EQUALS FALSE FLOAT FLOAT_TYPE FOR FUNCTION GREATER_EQUAL GREATER_THAN IDENTIFIER IF INTEGER INT_TYPE LBRACE LESS_EQUAL LESS_THAN LPAREN MINUS MOD MULTIPLY NOT NOT_EQUAL OR PLUS PRINT RBRACE READ RETURN RPAREN SEMICOLON STRING STRING_TYPE TRUE WHILEprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration\n                     | assignment\n                     | function_declaration\n                     | function_call_statement\n                     | conditional\n                     | loop\n                     | return_statement\n                     | print_statement\n                     | read_statement\n                     | emptyempty :function_call_statement : function_call SEMICOLONdeclaration : type IDENTIFIER SEMICOLON\n                       | type IDENTIFIER EQUALS expression SEMICOLONtype : INT_TYPE\n                | FLOAT_TYPE\n                | STRING_TYPE\n                | BOOL_TYPEassignment : IDENTIFIER EQUALS expression SEMICOLONexpression : logical_expr\n                      | function_calllogical_expr : comparison_expr\n                        | logical_expr AND comparison_expr\n                        | logical_expr OR comparison_expr\n                        | NOT comparison_exprcomparison_expr : arithmetic_expr\n                           | arithmetic_expr comparison_op arithmetic_exprcomparison_op : LESS_THAN\n                         | GREATER_THAN\n                         | LESS_EQUAL\n                         | GREATER_EQUAL\n                         | EQ\n                         | NOT_EQUALarithmetic_expr : term\n                           | arithmetic_expr PLUS term\n                           | arithmetic_expr MINUS term\n                           | arithmetic_expr MOD termterm : factor\n                | term MULTIPLY factor\n                | term DIVIDE factorfactor : INTEGER\n                  | FLOAT\n                  | STRING\n                  | TRUE\n                  | FALSE\n                  | IDENTIFIER\n                  | LPAREN expression RPARENfunction_declaration : FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACEparameter_list : \n                          | type IDENTIFIER\n                          | parameter_list COMMA type IDENTIFIERfunction_call : IDENTIFIER LPAREN argument_list RPARENargument_list : \n                         | expression\n                         | argument_list COMMA expressionconditional : IF LPAREN expression RPAREN LBRACE statement_list RBRACE\n                       | IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEloop : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE\n                | FOR LPAREN declaration expression SEMICOLON for_increment RPAREN LBRACE statement_list RBRACEfor_increment : IDENTIFIER EQUALS expressionfor_increment : expressionreturn_statement : RETURN expression SEMICOLONprint_statement : PRINT LPAREN expression RPAREN SEMICOLONread_statement : READ LPAREN RPAREN SEMICOLON'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,21,24,25,26,27,28,30,31,33,34,35,41,43,52,54,55,62,63,64,65,69,70,71,72,73,74,75,76,77,78,79,80,84,86,88,102,103,108,109,110,111,112,113,114,115,119,121,122,124,125,127,129,130,131,132,133,],[15,15,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,29,32,42,-18,-19,-20,-21,-3,42,42,-15,42,42,67,42,42,-16,42,42,-65,67,67,67,67,67,67,-31,-32,-33,-34,-35,-36,67,67,-22,42,107,-67,-17,15,15,118,-66,15,120,15,15,15,-59,-61,42,-51,15,15,15,15,-62,-60,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,54,63,84,102,103,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[16,16,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,-16,-65,-22,-67,-17,16,16,-66,16,16,16,16,-59,-61,-51,16,16,16,16,-62,-60,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,54,63,84,102,103,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,-16,-65,-22,-67,-17,18,18,-66,18,18,18,18,-59,-61,-51,18,18,18,18,-62,-60,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,54,63,84,102,103,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[19,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,-16,-65,-22,-67,-17,19,19,-66,19,19,19,19,-59,-61,-51,19,19,19,19,-62,-60,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,54,63,84,102,103,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[20,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,-16,-65,-22,-67,-17,20,20,-66,20,20,20,20,-59,-61,-51,20,20,20,20,-62,-60,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,54,63,84,102,103,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[21,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,-16,-65,-22,-67,-17,21,21,-66,21,21,21,21,-59,-61,-51,21,21,21,21,-62,-60,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,54,63,84,102,103,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[22,22,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,-16,-65,-22,-67,-17,22,22,-66,22,22,22,22,-59,-61,-51,22,22,22,22,-62,-60,]),'READ':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,54,63,84,102,103,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[23,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,-16,-65,-22,-67,-17,23,23,-66,23,23,23,23,-59,-61,-51,23,23,23,23,-62,-60,]),'INT_TYPE':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,36,54,59,63,84,102,103,106,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[24,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,24,-16,24,-65,-22,-67,-17,24,24,24,-66,24,24,24,24,-59,-61,-51,24,24,24,24,-62,-60,]),'FLOAT_TYPE':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,36,54,59,63,84,102,103,106,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[25,25,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,25,-16,25,-65,-22,-67,-17,25,25,25,-66,25,25,25,25,-59,-61,-51,25,25,25,25,-62,-60,]),'STRING_TYPE':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,36,54,59,63,84,102,103,106,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[26,26,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,26,-16,26,-65,-22,-67,-17,26,26,26,-66,26,26,26,26,-59,-61,-51,26,26,26,26,-62,-60,]),'BOOL_TYPE':([0,2,3,4,5,6,7,8,9,10,11,12,13,28,33,36,54,59,63,84,102,103,106,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[27,27,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,27,-16,27,-65,-22,-67,-17,27,27,27,-66,27,27,27,27,-59,-61,-51,27,27,27,27,-62,-60,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,28,33,54,63,84,102,103,111,121,122,125,132,133,],[-14,0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,-16,-65,-22,-67,-17,-66,-59,-61,-51,-62,-60,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,28,33,54,63,84,102,103,108,109,111,112,114,115,119,121,122,125,127,129,130,131,132,133,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-15,-16,-65,-22,-67,-17,-14,-14,-66,-14,121,122,125,-59,-61,-51,-14,-14,132,133,-62,-60,]),'EQUALS':([15,29,118,],[30,55,124,]),'LPAREN':([15,18,19,20,21,22,23,30,31,32,34,35,41,42,43,52,54,55,62,64,65,69,70,71,72,73,74,75,76,77,78,79,80,86,103,110,118,124,],[31,34,35,36,43,52,53,43,43,59,43,43,43,31,43,43,-16,43,43,43,43,43,43,43,43,-31,-32,-33,-34,-35,-36,43,43,43,-17,43,31,43,]),'SEMICOLON':([17,29,37,38,39,40,42,44,45,46,47,48,49,50,51,56,66,67,82,83,85,91,92,93,94,95,96,97,98,99,100,101,],[33,54,63,-23,-24,-25,-49,-29,-37,-41,-44,-45,-46,-47,-48,84,-28,-49,102,103,-55,110,-26,-27,-50,-30,-38,-39,-40,-42,-43,111,]),'NOT':([21,30,31,34,35,43,52,54,55,62,86,103,110,124,],[41,41,41,41,41,41,41,-16,41,41,41,-17,41,41,]),'INTEGER':([21,30,31,34,35,41,43,52,54,55,62,64,65,69,70,71,72,73,74,75,76,77,78,79,80,86,103,110,124,],[47,47,47,47,47,47,47,47,-16,47,47,47,47,47,47,47,47,-31,-32,-33,-34,-35,-36,47,47,47,-17,47,47,]),'FLOAT':([21,30,31,34,35,41,43,52,54,55,62,64,65,69,70,71,72,73,74,75,76,77,78,79,80,86,103,110,124,],[48,48,48,48,48,48,48,48,-16,48,48,48,48,48,48,48,48,-31,-32,-33,-34,-35,-36,48,48,48,-17,48,48,]),'STRING':([21,30,31,34,35,41,43,52,54,55,62,64,65,69,70,71,72,73,74,75,76,77,78,79,80,86,103,110,124,],[49,49,49,49,49,49,49,49,-16,49,49,49,49,49,49,49,49,-31,-32,-33,-34,-35,-36,49,49,49,-17,49,49,]),'TRUE':([21,30,31,34,35,41,43,52,54,55,62,64,65,69,70,71,72,73,74,75,76,77,78,79,80,86,103,110,124,],[50,50,50,50,50,50,50,50,-16,50,50,50,50,50,50,50,50,-31,-32,-33,-34,-35,-36,50,50,50,-17,50,50,]),'FALSE':([21,30,31,34,35,41,43,52,54,55,62,64,65,69,70,71,72,73,74,75,76,77,78,79,80,86,103,110,124,],[51,51,51,51,51,51,51,51,-16,51,51,51,51,51,51,51,51,-31,-32,-33,-34,-35,-36,51,51,51,-17,51,51,]),'RPAREN':([31,38,39,40,42,44,45,46,47,48,49,50,51,53,57,58,59,60,61,66,67,68,81,85,87,92,93,94,95,96,97,98,99,100,104,107,116,117,118,120,128,],[-56,-23,-24,-25,-49,-29,-37,-41,-44,-45,-46,-47,-48,82,85,-57,-52,89,90,-28,-49,94,101,-55,105,-26,-27,-50,-30,-38,-39,-40,-42,-43,-58,-53,-64,123,-49,-54,-63,]),'COMMA':([31,38,39,40,42,44,45,46,47,48,49,50,51,57,58,59,66,67,85,87,92,93,94,95,96,97,98,99,100,104,107,120,],[-56,-23,-24,-25,-49,-29,-37,-41,-44,-45,-46,-47,-48,86,-57,-52,-28,-49,-55,106,-26,-27,-50,-30,-38,-39,-40,-42,-43,-58,-53,-54,]),'AND':([38,40,42,44,45,46,47,48,49,50,51,66,67,92,93,94,95,96,97,98,99,100,118,],[64,-25,-49,-29,-37,-41,-44,-45,-46,-47,-48,-28,-49,-26,-27,-50,-30,-38,-39,-40,-42,-43,-49,]),'OR':([38,40,42,44,45,46,47,48,49,50,51,66,67,92,93,94,95,96,97,98,99,100,118,],[65,-25,-49,-29,-37,-41,-44,-45,-46,-47,-48,-28,-49,-26,-27,-50,-30,-38,-39,-40,-42,-43,-49,]),'MULTIPLY':([42,45,46,47,48,49,50,51,67,94,96,97,98,99,100,118,],[-49,79,-41,-44,-45,-46,-47,-48,-49,-50,79,79,79,-42,-43,-49,]),'DIVIDE':([42,45,46,47,48,49,50,51,67,94,96,97,98,99,100,118,],[-49,80,-41,-44,-45,-46,-47,-48,-49,-50,80,80,80,-42,-43,-49,]),'PLUS':([42,44,45,46,47,48,49,50,51,67,94,95,96,97,98,99,100,118,],[-49,70,-37,-41,-44,-45,-46,-47,-48,-49,-50,70,-38,-39,-40,-42,-43,-49,]),'MINUS':([42,44,45,46,47,48,49,50,51,67,94,95,96,97,98,99,100,118,],[-49,71,-37,-41,-44,-45,-46,-47,-48,-49,-50,71,-38,-39,-40,-42,-43,-49,]),'MOD':([42,44,45,46,47,48,49,50,51,67,94,95,96,97,98,99,100,118,],[-49,72,-37,-41,-44,-45,-46,-47,-48,-49,-50,72,-38,-39,-40,-42,-43,-49,]),'LESS_THAN':([42,44,45,46,47,48,49,50,51,67,94,96,97,98,99,100,118,],[-49,73,-37,-41,-44,-45,-46,-47,-48,-49,-50,-38,-39,-40,-42,-43,-49,]),'GREATER_THAN':([42,44,45,46,47,48,49,50,51,67,94,96,97,98,99,100,118,],[-49,74,-37,-41,-44,-45,-46,-47,-48,-49,-50,-38,-39,-40,-42,-43,-49,]),'LESS_EQUAL':([42,44,45,46,47,48,49,50,51,67,94,96,97,98,99,100,118,],[-49,75,-37,-41,-44,-45,-46,-47,-48,-49,-50,-38,-39,-40,-42,-43,-49,]),'GREATER_EQUAL':([42,44,45,46,47,48,49,50,51,67,94,96,97,98,99,100,118,],[-49,76,-37,-41,-44,-45,-46,-47,-48,-49,-50,-38,-39,-40,-42,-43,-49,]),'EQ':([42,44,45,46,47,48,49,50,51,67,94,96,97,98,99,100,118,],[-49,77,-37,-41,-44,-45,-46,-47,-48,-49,-50,-38,-39,-40,-42,-43,-49,]),'NOT_EQUAL':([42,44,45,46,47,48,49,50,51,67,94,96,97,98,99,100,118,],[-49,78,-37,-41,-44,-45,-46,-47,-48,-49,-50,-38,-39,-40,-42,-43,-49,]),'LBRACE':([89,90,105,123,126,],[108,109,112,127,129,]),'ELSE':([121,],[126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,108,109,112,127,129,],[2,114,115,119,130,131,]),'statement':([0,2,108,109,112,114,115,119,127,129,130,131,],[3,28,3,3,3,28,28,28,3,3,28,28,]),'declaration':([0,2,36,108,109,112,114,115,119,127,129,130,131,],[4,4,62,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,108,109,112,114,115,119,127,129,130,131,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'function_declaration':([0,2,108,109,112,114,115,119,127,129,130,131,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'function_call_statement':([0,2,108,109,112,114,115,119,127,129,130,131,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'conditional':([0,2,108,109,112,114,115,119,127,129,130,131,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'loop':([0,2,108,109,112,114,115,119,127,129,130,131,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'return_statement':([0,2,108,109,112,114,115,119,127,129,130,131,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'print_statement':([0,2,108,109,112,114,115,119,127,129,130,131,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'read_statement':([0,2,108,109,112,114,115,119,127,129,130,131,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'empty':([0,2,108,109,112,114,115,119,127,129,130,131,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'type':([0,2,36,59,106,108,109,112,114,115,119,127,129,130,131,],[14,14,14,88,113,14,14,14,14,14,14,14,14,14,14,]),'function_call':([0,2,21,30,31,34,35,43,52,55,62,86,108,109,110,112,114,115,119,124,127,129,130,131,],[17,17,39,39,39,39,39,39,39,39,39,39,17,17,39,17,17,17,17,39,17,17,17,17,]),'expression':([21,30,31,34,35,43,52,55,62,86,110,124,],[37,56,58,60,61,68,81,83,91,104,116,128,]),'logical_expr':([21,30,31,34,35,43,52,55,62,86,110,124,],[38,38,38,38,38,38,38,38,38,38,38,38,]),'comparison_expr':([21,30,31,34,35,41,43,52,55,62,64,65,86,110,124,],[40,40,40,40,40,66,40,40,40,40,92,93,40,40,40,]),'arithmetic_expr':([21,30,31,34,35,41,43,52,55,62,64,65,69,86,110,124,],[44,44,44,44,44,44,44,44,44,44,44,44,95,44,44,44,]),'term':([21,30,31,34,35,41,43,52,55,62,64,65,69,70,71,72,86,110,124,],[45,45,45,45,45,45,45,45,45,45,45,45,45,96,97,98,45,45,45,]),'factor':([21,30,31,34,35,41,43,52,55,62,64,65,69,70,71,72,79,80,86,110,124,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,99,100,46,46,46,]),'argument_list':([31,],[57,]),'comparison_op':([44,],[69,]),'parameter_list':([59,],[87,]),'for_increment':([110,],[117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',21),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',25),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',26),
  ('statement -> declaration','statement',1,'p_statement','parser.py',33),
  ('statement -> assignment','statement',1,'p_statement','parser.py',34),
  ('statement -> function_declaration','statement',1,'p_statement','parser.py',35),
  ('statement -> function_call_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> conditional','statement',1,'p_statement','parser.py',37),
  ('statement -> loop','statement',1,'p_statement','parser.py',38),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> empty','statement',1,'p_statement','parser.py',42),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',46),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','parser.py',50),
  ('declaration -> type IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',88),
  ('declaration -> type IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','parser.py',89),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',103),
  ('type -> FLOAT_TYPE','type',1,'p_type','parser.py',104),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',105),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',106),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','parser.py',110),
  ('expression -> logical_expr','expression',1,'p_expression','parser.py',121),
  ('expression -> function_call','expression',1,'p_expression','parser.py',122),
  ('logical_expr -> comparison_expr','logical_expr',1,'p_logical_expr','parser.py',127),
  ('logical_expr -> logical_expr AND comparison_expr','logical_expr',3,'p_logical_expr','parser.py',128),
  ('logical_expr -> logical_expr OR comparison_expr','logical_expr',3,'p_logical_expr','parser.py',129),
  ('logical_expr -> NOT comparison_expr','logical_expr',2,'p_logical_expr','parser.py',130),
  ('comparison_expr -> arithmetic_expr','comparison_expr',1,'p_comparison_expr','parser.py',146),
  ('comparison_expr -> arithmetic_expr comparison_op arithmetic_expr','comparison_expr',3,'p_comparison_expr','parser.py',147),
  ('comparison_op -> LESS_THAN','comparison_op',1,'p_comparison_op','parser.py',158),
  ('comparison_op -> GREATER_THAN','comparison_op',1,'p_comparison_op','parser.py',159),
  ('comparison_op -> LESS_EQUAL','comparison_op',1,'p_comparison_op','parser.py',160),
  ('comparison_op -> GREATER_EQUAL','comparison_op',1,'p_comparison_op','parser.py',161),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','parser.py',162),
  ('comparison_op -> NOT_EQUAL','comparison_op',1,'p_comparison_op','parser.py',163),
  ('arithmetic_expr -> term','arithmetic_expr',1,'p_arithmetic_expr','parser.py',168),
  ('arithmetic_expr -> arithmetic_expr PLUS term','arithmetic_expr',3,'p_arithmetic_expr','parser.py',169),
  ('arithmetic_expr -> arithmetic_expr MINUS term','arithmetic_expr',3,'p_arithmetic_expr','parser.py',170),
  ('arithmetic_expr -> arithmetic_expr MOD term','arithmetic_expr',3,'p_arithmetic_expr','parser.py',171),
  ('term -> factor','term',1,'p_term','parser.py',193),
  ('term -> term MULTIPLY factor','term',3,'p_term','parser.py',194),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',195),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',206),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',207),
  ('factor -> STRING','factor',1,'p_factor','parser.py',208),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',209),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',210),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',211),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',212),
  ('function_declaration -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statement_list RBRACE','function_declaration',8,'p_function_declaration','parser.py',219),
  ('parameter_list -> <empty>','parameter_list',0,'p_parameter_list','parser.py',231),
  ('parameter_list -> type IDENTIFIER','parameter_list',2,'p_parameter_list','parser.py',232),
  ('parameter_list -> parameter_list COMMA type IDENTIFIER','parameter_list',4,'p_parameter_list','parser.py',233),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser.py',242),
  ('argument_list -> <empty>','argument_list',0,'p_argument_list','parser.py',252),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',253),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',254),
  ('conditional -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','conditional',7,'p_conditional','parser.py',263),
  ('conditional -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','conditional',11,'p_conditional','parser.py',264),
  ('loop -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','loop',7,'p_loop','parser.py',272),
  ('loop -> FOR LPAREN declaration expression SEMICOLON for_increment RPAREN LBRACE statement_list RBRACE','loop',10,'p_loop','parser.py',273),
  ('for_increment -> IDENTIFIER EQUALS expression','for_increment',3,'p_for_increment_assignment','parser.py',281),
  ('for_increment -> expression','for_increment',1,'p_for_increment_expr','parser.py',292),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',296),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',300),
  ('read_statement -> READ LPAREN RPAREN SEMICOLON','read_statement',4,'p_read_statement','parser.py',304),
]
